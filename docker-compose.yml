version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dex-postgres
    environment:
      POSTGRES_DB: decentralized_exchange
      POSTGRES_USER: dex_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/api-rs/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - dex-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dex_user -d decentralized_exchange"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: dex-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - dex-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # API Service (Rust/Axum)
  api-service:
    build:
      context: ./services/api-rs
      dockerfile: Dockerfile
    container_name: dex-api
    environment:
      DATABASE_URL: postgresql://dex_user:${DB_PASSWORD:-secure_password_change_in_production}@postgres:5432/decentralized_exchange
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379
      RUST_LOG: info
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dex-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Indexer Service
  indexer-service:
    build:
      context: ./services/indexer-rs
      dockerfile: Dockerfile
    container_name: dex-indexer
    environment:
      DATABASE_URL: postgresql://dex_user:${DB_PASSWORD:-secure_password_change_in_production}@postgres:5432/decentralized_exchange
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_pass}@redis:6379
      RUST_LOG: info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dex-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # MEV Monitor Service
  mev-monitor:
    build:
      context: ./services/mev-monitor
      dockerfile: Dockerfile
    container_name: dex-mev-monitor
    environment:
      DATABASE_URL: postgresql://dex_user:${DB_PASSWORD:-secure_password_change_in_production}@postgres:5432/decentralized_exchange
      RUST_LOG: info
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dex-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # IPFS Service
  ipfs-service:
    build:
      context: ./services/ipfs-rs
      dockerfile: Dockerfile
    container_name: dex-ipfs
    environment:
      RUST_LOG: info
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - dex-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Keepers Service
  keepers-service:
    build:
      context: ./services/keepers-rs
      dockerfile: Dockerfile
    container_name: dex-keepers
    environment:
      DATABASE_URL: postgresql://dex_user:${DB_PASSWORD:-secure_password_change_in_production}@postgres:5432/decentralized_exchange
      RUST_LOG: info
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dex-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: dex-prometheus
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - dex-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: dex-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_change_in_production}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infra/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - dex-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: dex-nginx
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./web-ui/pkg:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-service
    networks:
      - dex-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  dex-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
