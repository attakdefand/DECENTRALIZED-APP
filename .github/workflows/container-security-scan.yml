name: Container Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  docker-security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker images
        run: |
          # Build all service images
          docker build -t dex-api:latest -f services/api-rs/Dockerfile .
          docker build -t dex-indexer:latest -f services/indexer-rs/Dockerfile .
          docker build -t dex-keepers:latest -f services/keepers-rs/Dockerfile .
          docker build -t dex-ipfs-monitor:latest -f services/ipfs-rs/Dockerfile .
          docker build -t dex-mev-monitor:latest -f services/mev-monitor/Dockerfile .
          docker build -t dex-aa-bundler:latest -f services/aa-bundler/Dockerfile .
          docker build -t dex-cli:latest -f crates/cli/Dockerfile .
          docker build -t dex-web-ui:latest -f web-ui/Dockerfile .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dex-api:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner on all images
        run: |
          echo "Scanning all images for vulnerabilities"
          for image in dex-api dex-indexer dex-keepers dex-ipfs-monitor dex-mev-monitor dex-aa-bundler dex-cli dex-web-ui; do
            echo "Scanning $image"
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --severity CRITICAL,HIGH $image:latest
          done

  kubernetes-security-scan:
    runs-on: ubuntu-latest
    needs: docker-security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install kubeval
        run: |
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          sudo cp kubeval /usr/local/bin

      - name: Validate Kubernetes manifests
        run: |
          helm template infra/k8s/helm | kubeval --strict

      - name: Run kube-score on manifests
        run: |
          # Install kube-score
          wget https://github.com/zegl/kube-score/releases/latest/download/kube-score_linux_amd64 -O kube-score
          chmod +x kube-score
          # Generate manifests and check them
          helm template infra/k8s/helm | ./kube-score score -o ci

  dockerfile-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Hadolint on Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: services/api-rs/Dockerfile
          failure-threshold: warning

      - name: Run Hadolint on all Dockerfiles
        run: |
          echo "Linting all Dockerfiles"
          find . -name "Dockerfile" -not -path "./target/*" | while read dockerfile; do
            echo "Linting $dockerfile"
            hadolint "$dockerfile" || true
          done