name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: clippy, rustfmt
        override: true
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target/
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Check clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings
    
    - name: Check for unused dependencies
      run: |
        cargo install cargo-udeps --locked
        cargo udeps --all-targets --all-features
    
    - name: Build workspace
      run: cargo build --workspace --all-targets
    
    - name: Run tests
      run: cargo test --workspace
    
    - name: Run documentation tests
      run: cargo test --workspace --doc

  property-tests:
    name: Property Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-property-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run property tests
      run: |
        cargo test --workspace --features property-tests
        # Run specific property tests for critical modules
        cargo test -p amm --lib -- properties::
        cargo test -p lending --lib -- properties::

  fuzz-tests:
    name: Fuzz Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz
    
    - name: Run fuzz tests
      run: |
        # Run fuzz tests for critical math functions
        timeout 300s cargo fuzz run amm_math -- -max_total_time=60 || true
        timeout 300s cargo fuzz run lending_calculations -- -max_total_time=60 || true

  invariant-tests:
    name: Invariant Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Run invariant tests
      run: |
        # Run invariant tests for critical modules
        cargo test -p amm --lib -- invariants::
        cargo test -p lending --lib -- invariants::

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push indexer service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/indexer-rs/Dockerfile
        push: false
        tags: decentralized-app/indexer:latest
    
    - name: Build and push API service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/api-rs/Dockerfile
        push: false
        tags: decentralized-app/api:latest
    
    - name: Build and push keepers service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/keepers-rs/Dockerfile
        push: false
        tags: decentralized-app/keepers:latest
    
    - name: Build and push IPFS monitor service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/ipfs-rs/Dockerfile
        push: false
        tags: decentralized-app/ipfs-monitor:latest
    
    - name: Build and push MEV monitor service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/mev-monitor/Dockerfile
        push: false
        tags: decentralized-app/mev-monitor:latest
    
    - name: Build and push AA bundler service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/aa-bundler/Dockerfile
        push: false
        tags: decentralized-app/aa-bundler:latest

  container-scan:
    name: Container Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build containers for scanning
      run: |
        docker build -f ./services/indexer-rs/Dockerfile -t decentralized-app/indexer:latest .
        docker build -f ./services/api-rs/Dockerfile -t decentralized-app/api:latest .
        docker build -f ./services/keepers-rs/Dockerfile -t decentralized-app/keepers:latest .
        docker build -f ./services/ipfs-rs/Dockerfile -t decentralized-app/ipfs-monitor:latest .
        docker build -f ./services/mev-monitor/Dockerfile -t decentralized-app/mev-monitor:latest .
        docker build -f ./services/aa-bundler/Dockerfile -t decentralized-app/aa-bundler:latest .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'decentralized-app/indexer:latest'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
    
    - name: Run Grype vulnerability scanner
      run: |
        # Install Grype
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        # Scan images
        grype decentralized-app/indexer:latest -o sarif --fail-on high
        grype decentralized-app/api:latest -o sarif --fail-on high
        grype decentralized-app/keepers:latest -o sarif --fail-on high
        grype decentralized-app/ipfs-monitor:latest -o sarif --fail-on high
        grype decentralized-app/mev-monitor:latest -o sarif --fail-on high
        grype decentralized-app/aa-bundler:latest -o sarif --fail-on high

  sbom-generation:
    name: SBOM Generation
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Install cargo-sbom
      run: cargo install cargo-sbom
    
    - name: Install syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
    
    - name: Generate SBOM with cargo-sbom
      run: |
        cargo sbom > sbom_cargo.json
        echo "SBOM generated with cargo-sbom successfully"
    
    - name: Generate SBOM with syft
      run: |
        syft . -o spdx-json > sbom_syft.json
        echo "SBOM generated with syft successfully"

  policy-tests:
    name: Policy-as-code Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install OPA
      run: |
        curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
        chmod +x opa
        sudo mv opa /usr/local/bin/
    
    - name: Run OPA policy tests
      run: |
        # Test OPA policies
        opa test infra/policies/opa/ -v
    
    - name: Install Cedar validator
      run: |
        # For Cedar policies, we'll use a simple validation approach
        echo "Validating Cedar policies syntax"
        # This is a placeholder - in a real implementation, we would use a Cedar validator
        find infra/policies/cedar/ -name "*.cedar" -exec echo "Validating {}" \;

  slither-analysis:
    name: Slither Static Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Slither
      run: |
        pip3 install slither-analyzer
        pip3 install solc-select
        solc-select install 0.8.19
        solc-select use 0.8.19
    
    - name: Run Slither analysis
      run: |
        # Run Slither on all Solidity contracts
        find contracts -name "*.sol" -exec slither {} \;
    
    - name: Install Mythril
      run: |
        pip3 install mythril
    
    - name: Run Mythril analysis
      run: |
        # Run Mythril on all Solidity contracts
        find contracts -name "*.sol" -exec mythril analyze {} \;

  gas-snapshot:
    name: Gas Snapshot
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
    
    - name: Run gas snapshot
      run: |
        # This is a placeholder - in a real implementation, we would run gas snapshot tests
        echo "Running gas snapshot tests"
        # forge snapshot --match-path contracts/test/*.sol

  bytecode-diff:
    name: Bytecode Diff
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2
    
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
    
    - name: Run bytecode diff
      run: |
        # This is a placeholder - in a real implementation, we would compare bytecode
        echo "Running bytecode diff analysis"
        # forge inspect MyContract bytecode > bytecode_new.txt
        # git checkout HEAD~1
        # forge inspect MyContract bytecode > bytecode_old.txt
        # diff bytecode_old.txt bytecode_new.txt

  policy-validation:
    name: Policy Validation
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run policy validation tests
      run: |
        chmod +x tests/policy-tests/policy-validation.sh
        ./tests/policy-tests/policy-validation.sh
    
    - name: Run policy lint checks
      run: |
        chmod +x scripts/policy-lint.sh
        ./scripts/policy-lint.sh
    
    - name: Verify policy bundle signatures
      run: |
        chmod +x scripts/verify-policy-bundle.sh
        ./scripts/verify-policy-bundle.sh